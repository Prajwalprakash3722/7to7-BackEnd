library(readxl)
alldata_banaswadi <- read_excel("C:/Users/Anju/Desktop/U-Trust/TWO YEAR(BRANCH WISE)/Banaswadi_R/alldata_banaswadi.xlsx")
View(alldata_banaswadi)
sum(duplicated(alldata_banaswadi$Reg_No))
length(unique(alldata_banaswadi$Reg_No))
library(readxl)
dataset <- read_excel(NULL)
View(dataset)
library(readxl)
library(ggplot2)
library(plyr)
library(dbplyr)
library(dplyr)
library(dtplyr)
library(readxl)
license()
source("E:/U Trust/Hyundai service data.R")
setwd("E:/LeadScore")
# File Name: NandiToyota_LeadScore.R
# File Type: R Script
# File Size: 1 KB
# Authors: Anju M Nair {anju@popularmc.com} & Resmi Reghukumar {Data2@popularmc.com}
# Created On: 11/12/2021 12:27:26 PM
# Last Modified On: 21/12/2021 12:11:30 PM
# Copy Rights: Popular Motor Corporation Pvt Ltd
# Description: Lead Scoring different dataset
# Setting the Current Working Directory
setwd("E:/LeadScore")
# Suppress Warnings
options(warn = -1)
# Import Required Packages
library(readxl)
library(svDialogs)
# Read "Master_Models_Data.csv" File
MasterFile=read.csv("Master_Models_Data.csv",header = T,check.names = F)
# Get Model ID From Dialog Box
var1 <- dlgInput(t(MasterFile))$res
# If Model ID found invokes corresponding data and model
if(var1 %in% MasterFile$Modelid){
source("LeadScoring.R")}else
print("invalid ID")
# load the model
super_model <- readRDS(MasterFile$`Model File`[MasterFile$Modelid==var1])
View(MasterFile)
Test_Data<-read_csv(MasterFile$`Data File`[MasterFile$Modelid==var1],show_col_types = FALSE)
# load the model
super_model <- readRDS(MasterFile$`Model File`[MasterFile$Modelid==var1])
# Read Prediction dataset
if(MasterFile$`Data File`[MasterFile$Modelid==var1]==""){
print("Prediction File Not Found")
}else{
Test_Data<-read_csv(MasterFile$`Data File`[MasterFile$Modelid==var1],show_col_types = FALSE)
# Convert All character Variable to Factor
Test_Data[sapply(Test_Data, is.character)] <- lapply(Test_Data[sapply(Test_Data, is.character)],as.factor)
# Convert Class to Factor
Test_Data$Status<-as.factor(Test_Data$Status)
# Relevel Factor
Test_Data$Status=relevel(Test_Data$Status, ref = "1")
# Prediction dataset
Test_Data$"Predicted Class" <- predict(super_model,Test_Data,type ="class")
Test_Data$"Predicted Prob" <- predict(super_model,Test_Data,type ="prob")
# load the model
super_model <- readRDS(MasterFile$`Model File`[MasterFile$Modelid==var1])
# Read Prediction dataset
if(MasterFile$`Data File`[MasterFile$Modelid==var1]==""){
print("Prediction File Not Found")
}else{
Test_Data<-read_csv(MasterFile$`Data File`[MasterFile$Modelid==var1],show_col_types = FALSE)
# Convert All character Variable to Factor
Test_Data[sapply(Test_Data, is.character)] <- lapply(Test_Data[sapply(Test_Data, is.character)],as.factor)
# Convert Class to Factor
Test_Data$Status<-as.factor(Test_Data$Status)
# Relevel Factor
Test_Data$Status=relevel(Test_Data$Status, ref = "1")
# Prediction dataset
Test_Data$"Predicted Class" <- predict(super_model,Test_Data,type ="class")
Test_Data$"Predicted Prob" <- predict(super_model,Test_Data,type ="prob")
#Save Prediction File
#Print Confusion Matrix
cat("\n")
cat("Confusion Matrix of Prediction Dataset")
cat("\n")
CrossTable( Test_Data$Status,Test_Data$`Predicted Class`)
e=confusionMatrix(Test_Data$`Predicted Class`, Test_Data$Status)
Accuracy=round(((e$table[1,1]+e$table[2,2])/(e$table[1,1]+e$table[1,2]+e$table[2,1]+e$table[2,2]))*100,2)
cat("--------------------------------------")
cat("\n")
cat("Classification Matrix")
cat("\n")
cat("--------------------------------------")
cat("\n")
cat("Accuracy=",Accuracy,paste0("%"))
cat("\n")
precision=round((e$table[1,1]/(e$table[1,1]+e$table[1,2]))*100,2)
cat("Precision=",precision,paste0("%"))
cat("\n")
recall=round((e$table[1,1]/(e$table[1,1]+e$table[2,1]))*100,2)
cat("Recall=",recall,paste0("%"))
cat("\n")
F1score=round(2*(precision*recall)/(precision+recall),2)
cat("F1-Score=",F1score,paste0("%"))
cat("\n")
}
View(Test_Data)
Test_Data<-read_csv(MasterFile$`Data File`[MasterFile$Modelid==var1],show_col_types = FALSE)
Test_Data[sapply(Test_Data, is.character)] <- lapply(Test_Data[sapply(Test_Data, is.character)],as.factor)
install.packages("svDialogs") 
